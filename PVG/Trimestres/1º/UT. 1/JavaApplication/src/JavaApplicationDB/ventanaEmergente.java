/**
 *
 * @author Rodrigo
 */
package JavaApplicationDB;


// Importa de la biblioteca/librería el paquete "Dimension".
import java.awt.Dimension;
// Importa de la biblioteca/librería el paquete "Connection".
import java.sql.Connection;
// Importa de la biblioteca/librería el paquete "DriverManager".
import java.sql.DriverManager;
// Importa de la biblioteca/librería el paquete "ResultSet".
import java.sql.ResultSet;
// Importa de la biblioteca/librería el paquete "SQLException".
import java.sql.SQLException;
// Importa de la biblioteca/librería el paquete "Statement".
import java.sql.Statement;
// Importa de la biblioteca/librería el paquete "JButton".
import javax.swing.JButton;
// Importa de la biblioteca/librería el paquete "JLabel".
import javax.swing.JLabel;
// Importa de la biblioteca/librería el paquete "JOptionPane".
import javax.swing.JOptionPane;
// Importa de la biblioteca/librería el paquete "JScrollPane".
import javax.swing.JScrollPane;
// Importa de la biblioteca/librería el paquete "JTextArea".
import javax.swing.JTextArea;

public class ventanaEmergente extends javax.swing.JPanel{
    /**
     * Creates new form ventanaEmergente
     */
    public ventanaEmergente(){
        initComponents();
        
        // Aquí construyes tu interfaz gráfica.
        JLabel etiqueta = new JLabel("?Hola! Aquí va/visualizas tu interfaz para conectar o crear base de datos.");
        
        // Botones
        JButton botonCrear = new JButton("Crear Base de Datos");
        JButton botonConectar = new JButton("Conectar Base de Datos");
        
        this.add(etiqueta); /* A?ade un componente al panel. */
        this.add(botonCrear);
        this.add(botonConectar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton1.setFont(new java.awt.Font("Sylfaen", 3, 18)); // NOI18N
        jButton1.setText("CREAR");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setPreferredSize(new java.awt.Dimension(140, 35));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Sylfaen", 3, 18)); // NOI18N
        jButton2.setText("MODIFICAR");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setPreferredSize(new java.awt.Dimension(140, 35));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("JADB");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel1)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Declara una variable que contendrá almacenada la URL de conexión a la base de datos.        // Crea un bloque "try-catch" para que el botón cumpla la función de crear una base de datos.
        String url = "jdbc:sqlite:miBD.db";
        
        // Crea un bloque "try-catch" para que el botón cumpla la función de crear una base de datos.
        try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement()){ /* Primero abre la conexión y usa try-with-resources para cerrarla automáticamente. Posteriormente, crea un "Statement" para ejecutar 'SQL'. */
            //stmt.execute("CREATE TABLE IF NOT EXISTS Usuarios (id INTEGER PRIMARY KEY, nombre TEXT)");
            
            // Declara una variable (SQL) con la que poder crear la tabla si no existe.
            String sql = "CREATE TABLE IF NOT EXISTS Usuarios (id INTEGER PRIMARY KEY, nombre TEXT)";
            
            // Ejecuta la sentencia SQL.
            stmt.execute(sql);
            
            // Muestreo del resultado final, de la ejecución del botón, al usuario.
            JOptionPane.showMessageDialog(this, "La base de datos y tablas han sido creadas correctamente.", "Resultado de la función", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException sqle){ JOptionPane.showMessageDialog(this, "Error. " + sqle.getMessage(), "Error en la ejecución", JOptionPane.ERROR_MESSAGE); }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Declara una variable que contendrá almacenada la URL de conexión a la base de datos.        // Crea un bloque "try-catch" para que el botón cumpla la función de crear una base de datos.
        String url = "jdbc:sqlite:miBD.db";
        
        // Crea un bloque "try-catch" para que el botón cumpla la función de crear una base de datos.
        try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM usuarios");){ /* Primero abre la conexión y usa try-with-resources para cerrarla automáticamente. Posteriormente, crea un "Statement" para ejecutar 'SQL'. Y, finalmente, se ejecuta el comando "SELECT", obteniendo el "ResultSet". */
            // Acumula los resultados y/para terminar mostrándolos todos juntos.
            StringBuilder sb = new StringBuilder();

            // Crea un bucle de tipo "while" donde iteramos por cada fila del "ResultSet" obtenido anteriormente.
            while (rs.next()){
                // Crea una variable numérica con la que leer la columna 'id'.
                int id = rs.getInt("id");

                // Declara una variable de cadena con la que leer la columna 'nombre'.
                String nombre = rs.getString("nombre");

                // A?ade tofo lo hecho en la fila al StringBuilder.
                sb.append("ID: ").append(id).append("  Nombre: ").append(nombre).append("\n");
            }

            // Crea un condicional de tipo "if-else" donde comprobar/asegurar para el caso de que no haya registros.
            if (sb.length() == 0) {
                JOptionPane.showMessageDialog(this, "No hay registros en la tabla usuarios", "Resultado de la función", JOptionPane.INFORMATION_MESSAGE); // comentario: avisamos

            // Comprueba/Asegura para el caso de que si haya registros, mostrándolos en un "JTextArea" dentro de un "JScrollPane".
            } else{
                // Crea un "textarea" con los resultados obtenidos.
                JTextArea ta = new JTextArea(sb.toString());

                // Hace un 'read-only'.
                ta.setEditable(false);

                // Pone el "textarea" dentro de un "scroll".
                JScrollPane scroll = new JScrollPane(ta);

                // Ajusta el tama?o del scroll para que el diálogo no sea enorme.
                scroll.setPreferredSize(new Dimension(400, 200));

                JOptionPane.showMessageDialog(this, scroll, "Registros", JOptionPane.INFORMATION_MESSAGE); // comentario: mostramos los resultados al usuario
            }
        } catch (SQLException sqle){ JOptionPane.showMessageDialog(this, "Error. " + sqle.getMessage(), "Error en la ejecución", JOptionPane.ERROR_MESSAGE); }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
